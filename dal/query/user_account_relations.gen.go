// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"playground/model"
)

func newUserAccountRelation(db *gorm.DB, opts ...gen.DOOption) userAccountRelation {
	_userAccountRelation := userAccountRelation{}

	_userAccountRelation.userAccountRelationDo.UseDB(db, opts...)
	_userAccountRelation.userAccountRelationDo.UseModel(&model.UserAccountRelation{})

	tableName := _userAccountRelation.userAccountRelationDo.TableName()
	_userAccountRelation.ALL = field.NewAsterisk(tableName)
	_userAccountRelation.ID = field.NewUint(tableName, "id")
	_userAccountRelation.CreatedAt = field.NewTime(tableName, "created_at")
	_userAccountRelation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userAccountRelation.DeletedAt = field.NewField(tableName, "deleted_at")
	_userAccountRelation.UserID = field.NewUint(tableName, "user_id")
	_userAccountRelation.AccountID = field.NewUint(tableName, "account_id")
	_userAccountRelation.UserInfo = userAccountRelationBelongsToUserInfo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserInfo", "model.User"),
		UserExtInfo: struct {
			field.RelationField
			UserInfo struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("UserInfo.UserExtInfo", "model.UserExt"),
			UserInfo: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("UserInfo.UserExtInfo.UserInfo", "model.User"),
			},
		},
		UserAccountRelationInfo: struct {
			field.RelationField
			UserInfo struct {
				field.RelationField
			}
			AccountInfo struct {
				field.RelationField
				CompanyInfo struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("UserInfo.UserAccountRelationInfo", "model.UserAccountRelation"),
			UserInfo: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("UserInfo.UserAccountRelationInfo.UserInfo", "model.User"),
			},
			AccountInfo: struct {
				field.RelationField
				CompanyInfo struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("UserInfo.UserAccountRelationInfo.AccountInfo", "model.Account"),
				CompanyInfo: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("UserInfo.UserAccountRelationInfo.AccountInfo.CompanyInfo", "model.Company"),
				},
			},
		},
	}

	_userAccountRelation.AccountInfo = userAccountRelationBelongsToAccountInfo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("AccountInfo", "model.Account"),
	}

	_userAccountRelation.fillFieldMap()

	return _userAccountRelation
}

type userAccountRelation struct {
	userAccountRelationDo userAccountRelationDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Uint
	AccountID field.Uint
	UserInfo  userAccountRelationBelongsToUserInfo

	AccountInfo userAccountRelationBelongsToAccountInfo

	fieldMap map[string]field.Expr
}

func (u userAccountRelation) Table(newTableName string) *userAccountRelation {
	u.userAccountRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAccountRelation) As(alias string) *userAccountRelation {
	u.userAccountRelationDo.DO = *(u.userAccountRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAccountRelation) updateTableName(table string) *userAccountRelation {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewUint(table, "user_id")
	u.AccountID = field.NewUint(table, "account_id")

	u.fillFieldMap()

	return u
}

func (u *userAccountRelation) WithContext(ctx context.Context) *userAccountRelationDo {
	return u.userAccountRelationDo.WithContext(ctx)
}

func (u userAccountRelation) TableName() string { return u.userAccountRelationDo.TableName() }

func (u userAccountRelation) Alias() string { return u.userAccountRelationDo.Alias() }

func (u userAccountRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.userAccountRelationDo.Columns(cols...)
}

func (u *userAccountRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAccountRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["account_id"] = u.AccountID

}

func (u userAccountRelation) clone(db *gorm.DB) userAccountRelation {
	u.userAccountRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAccountRelation) replaceDB(db *gorm.DB) userAccountRelation {
	u.userAccountRelationDo.ReplaceDB(db)
	return u
}

type userAccountRelationBelongsToUserInfo struct {
	db *gorm.DB

	field.RelationField

	UserExtInfo struct {
		field.RelationField
		UserInfo struct {
			field.RelationField
		}
	}
	UserAccountRelationInfo struct {
		field.RelationField
		UserInfo struct {
			field.RelationField
		}
		AccountInfo struct {
			field.RelationField
			CompanyInfo struct {
				field.RelationField
			}
		}
	}
}

func (a userAccountRelationBelongsToUserInfo) Where(conds ...field.Expr) *userAccountRelationBelongsToUserInfo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userAccountRelationBelongsToUserInfo) WithContext(ctx context.Context) *userAccountRelationBelongsToUserInfo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userAccountRelationBelongsToUserInfo) Session(session *gorm.Session) *userAccountRelationBelongsToUserInfo {
	a.db = a.db.Session(session)
	return &a
}

func (a userAccountRelationBelongsToUserInfo) Model(m *model.UserAccountRelation) *userAccountRelationBelongsToUserInfoTx {
	return &userAccountRelationBelongsToUserInfoTx{a.db.Model(m).Association(a.Name())}
}

type userAccountRelationBelongsToUserInfoTx struct{ tx *gorm.Association }

func (a userAccountRelationBelongsToUserInfoTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userAccountRelationBelongsToUserInfoTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userAccountRelationBelongsToUserInfoTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userAccountRelationBelongsToUserInfoTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userAccountRelationBelongsToUserInfoTx) Clear() error {
	return a.tx.Clear()
}

func (a userAccountRelationBelongsToUserInfoTx) Count() int64 {
	return a.tx.Count()
}

type userAccountRelationBelongsToAccountInfo struct {
	db *gorm.DB

	field.RelationField
}

func (a userAccountRelationBelongsToAccountInfo) Where(conds ...field.Expr) *userAccountRelationBelongsToAccountInfo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userAccountRelationBelongsToAccountInfo) WithContext(ctx context.Context) *userAccountRelationBelongsToAccountInfo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userAccountRelationBelongsToAccountInfo) Session(session *gorm.Session) *userAccountRelationBelongsToAccountInfo {
	a.db = a.db.Session(session)
	return &a
}

func (a userAccountRelationBelongsToAccountInfo) Model(m *model.UserAccountRelation) *userAccountRelationBelongsToAccountInfoTx {
	return &userAccountRelationBelongsToAccountInfoTx{a.db.Model(m).Association(a.Name())}
}

type userAccountRelationBelongsToAccountInfoTx struct{ tx *gorm.Association }

func (a userAccountRelationBelongsToAccountInfoTx) Find() (result *model.Account, err error) {
	return result, a.tx.Find(&result)
}

func (a userAccountRelationBelongsToAccountInfoTx) Append(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userAccountRelationBelongsToAccountInfoTx) Replace(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userAccountRelationBelongsToAccountInfoTx) Delete(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userAccountRelationBelongsToAccountInfoTx) Clear() error {
	return a.tx.Clear()
}

func (a userAccountRelationBelongsToAccountInfoTx) Count() int64 {
	return a.tx.Count()
}

type userAccountRelationDo struct{ gen.DO }

func (u userAccountRelationDo) Debug() *userAccountRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u userAccountRelationDo) WithContext(ctx context.Context) *userAccountRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAccountRelationDo) ReadDB() *userAccountRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAccountRelationDo) WriteDB() *userAccountRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAccountRelationDo) Session(config *gorm.Session) *userAccountRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAccountRelationDo) Clauses(conds ...clause.Expression) *userAccountRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAccountRelationDo) Returning(value interface{}, columns ...string) *userAccountRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAccountRelationDo) Not(conds ...gen.Condition) *userAccountRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAccountRelationDo) Or(conds ...gen.Condition) *userAccountRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAccountRelationDo) Select(conds ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAccountRelationDo) Where(conds ...gen.Condition) *userAccountRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAccountRelationDo) Order(conds ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAccountRelationDo) Distinct(cols ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAccountRelationDo) Omit(cols ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAccountRelationDo) Join(table schema.Tabler, on ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAccountRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAccountRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAccountRelationDo) Group(cols ...field.Expr) *userAccountRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAccountRelationDo) Having(conds ...gen.Condition) *userAccountRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAccountRelationDo) Limit(limit int) *userAccountRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAccountRelationDo) Offset(offset int) *userAccountRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAccountRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userAccountRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAccountRelationDo) Unscoped() *userAccountRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAccountRelationDo) Create(values ...*model.UserAccountRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAccountRelationDo) CreateInBatches(values []*model.UserAccountRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAccountRelationDo) Save(values ...*model.UserAccountRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAccountRelationDo) First() (*model.UserAccountRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountRelation), nil
	}
}

func (u userAccountRelationDo) Take() (*model.UserAccountRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountRelation), nil
	}
}

func (u userAccountRelationDo) Last() (*model.UserAccountRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountRelation), nil
	}
}

func (u userAccountRelationDo) Find() ([]*model.UserAccountRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAccountRelation), err
}

func (u userAccountRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAccountRelation, err error) {
	buf := make([]*model.UserAccountRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAccountRelationDo) FindInBatches(result *[]*model.UserAccountRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAccountRelationDo) Attrs(attrs ...field.AssignExpr) *userAccountRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAccountRelationDo) Assign(attrs ...field.AssignExpr) *userAccountRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAccountRelationDo) Joins(fields ...field.RelationField) *userAccountRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAccountRelationDo) Preload(fields ...field.RelationField) *userAccountRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAccountRelationDo) FirstOrInit() (*model.UserAccountRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountRelation), nil
	}
}

func (u userAccountRelationDo) FirstOrCreate() (*model.UserAccountRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAccountRelation), nil
	}
}

func (u userAccountRelationDo) FindByPage(offset int, limit int) (result []*model.UserAccountRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAccountRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAccountRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAccountRelationDo) Delete(models ...*model.UserAccountRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAccountRelationDo) withDO(do gen.Dao) *userAccountRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
