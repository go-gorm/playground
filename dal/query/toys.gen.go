// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/playground/model"
)

func newToy(db *gorm.DB, opts ...gen.DOOption) toy {
	_toy := toy{}

	_toy.toyDo.UseDB(db, opts...)
	_toy.toyDo.UseModel(&model.Toy{})

	tableName := _toy.toyDo.TableName()
	_toy.ALL = field.NewAsterisk(tableName)
	_toy.ID = field.NewUint(tableName, "id")
	_toy.CreatedAt = field.NewTime(tableName, "created_at")
	_toy.UpdatedAt = field.NewTime(tableName, "updated_at")
	_toy.DeletedAt = field.NewField(tableName, "deleted_at")
	_toy.Name = field.NewString(tableName, "name")
	_toy.OwnerID = field.NewString(tableName, "owner_id")
	_toy.OwnerType = field.NewString(tableName, "owner_type")

	_toy.fillFieldMap()

	return _toy
}

type toy struct {
	toyDo toyDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	OwnerID   field.String
	OwnerType field.String

	fieldMap map[string]field.Expr
}

func (t toy) Table(newTableName string) *toy {
	t.toyDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t toy) As(alias string) *toy {
	t.toyDo.DO = *(t.toyDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *toy) updateTableName(table string) *toy {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Name = field.NewString(table, "name")
	t.OwnerID = field.NewString(table, "owner_id")
	t.OwnerType = field.NewString(table, "owner_type")

	t.fillFieldMap()

	return t
}

func (t *toy) WithContext(ctx context.Context) *toyDo { return t.toyDo.WithContext(ctx) }

func (t toy) TableName() string { return t.toyDo.TableName() }

func (t toy) Alias() string { return t.toyDo.Alias() }

func (t toy) Columns(cols ...field.Expr) gen.Columns { return t.toyDo.Columns(cols...) }

func (t *toy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *toy) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["name"] = t.Name
	t.fieldMap["owner_id"] = t.OwnerID
	t.fieldMap["owner_type"] = t.OwnerType
}

func (t toy) clone(db *gorm.DB) toy {
	t.toyDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t toy) replaceDB(db *gorm.DB) toy {
	t.toyDo.ReplaceDB(db)
	return t
}

type toyDo struct{ gen.DO }

func (t toyDo) Debug() *toyDo {
	return t.withDO(t.DO.Debug())
}

func (t toyDo) WithContext(ctx context.Context) *toyDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t toyDo) ReadDB() *toyDo {
	return t.Clauses(dbresolver.Read)
}

func (t toyDo) WriteDB() *toyDo {
	return t.Clauses(dbresolver.Write)
}

func (t toyDo) Session(config *gorm.Session) *toyDo {
	return t.withDO(t.DO.Session(config))
}

func (t toyDo) Clauses(conds ...clause.Expression) *toyDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t toyDo) Returning(value interface{}, columns ...string) *toyDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t toyDo) Not(conds ...gen.Condition) *toyDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t toyDo) Or(conds ...gen.Condition) *toyDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t toyDo) Select(conds ...field.Expr) *toyDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t toyDo) Where(conds ...gen.Condition) *toyDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t toyDo) Order(conds ...field.Expr) *toyDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t toyDo) Distinct(cols ...field.Expr) *toyDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t toyDo) Omit(cols ...field.Expr) *toyDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t toyDo) Join(table schema.Tabler, on ...field.Expr) *toyDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t toyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *toyDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t toyDo) RightJoin(table schema.Tabler, on ...field.Expr) *toyDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t toyDo) Group(cols ...field.Expr) *toyDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t toyDo) Having(conds ...gen.Condition) *toyDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t toyDo) Limit(limit int) *toyDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t toyDo) Offset(offset int) *toyDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t toyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *toyDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t toyDo) Unscoped() *toyDo {
	return t.withDO(t.DO.Unscoped())
}

func (t toyDo) Create(values ...*model.Toy) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t toyDo) CreateInBatches(values []*model.Toy, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t toyDo) Save(values ...*model.Toy) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t toyDo) First() (*model.Toy, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toy), nil
	}
}

func (t toyDo) Take() (*model.Toy, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toy), nil
	}
}

func (t toyDo) Last() (*model.Toy, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toy), nil
	}
}

func (t toyDo) Find() ([]*model.Toy, error) {
	result, err := t.DO.Find()
	return result.([]*model.Toy), err
}

func (t toyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Toy, err error) {
	buf := make([]*model.Toy, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t toyDo) FindInBatches(result *[]*model.Toy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t toyDo) Attrs(attrs ...field.AssignExpr) *toyDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t toyDo) Assign(attrs ...field.AssignExpr) *toyDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t toyDo) Joins(fields ...field.RelationField) *toyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t toyDo) Preload(fields ...field.RelationField) *toyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t toyDo) FirstOrInit() (*model.Toy, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toy), nil
	}
}

func (t toyDo) FirstOrCreate() (*model.Toy, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Toy), nil
	}
}

func (t toyDo) FindByPage(offset int, limit int) (result []*model.Toy, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t toyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t toyDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t toyDo) Delete(models ...*model.Toy) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *toyDo) withDO(do gen.Dao) *toyDo {
	t.DO = *do.(*gen.DO)
	return t
}
