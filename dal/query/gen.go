// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                   = new(Query)
	Account             *account
	Company             *company
	User                *user
	UserAccountRelation *userAccountRelation
	UserExt             *userExt
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	Company = &Q.Company
	User = &Q.User
	UserAccountRelation = &Q.UserAccountRelation
	UserExt = &Q.UserExt
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                  db,
		Account:             newAccount(db, opts...),
		Company:             newCompany(db, opts...),
		User:                newUser(db, opts...),
		UserAccountRelation: newUserAccountRelation(db, opts...),
		UserExt:             newUserExt(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account             account
	Company             company
	User                user
	UserAccountRelation userAccountRelation
	UserExt             userExt
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Account:             q.Account.clone(db),
		Company:             q.Company.clone(db),
		User:                q.User.clone(db),
		UserAccountRelation: q.UserAccountRelation.clone(db),
		UserExt:             q.UserExt.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		Account:             q.Account.replaceDB(db),
		Company:             q.Company.replaceDB(db),
		User:                q.User.replaceDB(db),
		UserAccountRelation: q.UserAccountRelation.replaceDB(db),
		UserExt:             q.UserExt.replaceDB(db),
	}
}

type queryCtx struct {
	Account             *accountDo
	Company             *companyDo
	User                *userDo
	UserAccountRelation *userAccountRelationDo
	UserExt             *userExtDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:             q.Account.WithContext(ctx),
		Company:             q.Company.WithContext(ctx),
		User:                q.User.WithContext(ctx),
		UserAccountRelation: q.UserAccountRelation.WithContext(ctx),
		UserExt:             q.UserExt.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
