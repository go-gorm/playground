// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm.io/playground/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewUint(tableName, "id")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.Name = field.NewString(tableName, "name")
	_user.Age = field.NewUint(tableName, "age")
	_user.Birthday = field.NewTime(tableName, "birthday")
	_user.CompanyID = field.NewInt(tableName, "company_id")
	_user.ManagerID = field.NewUint(tableName, "manager_id")
	_user.Active = field.NewBool(tableName, "active")
	_user.Account = userHasOneAccount{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Account", "model.Account"),
	}

	_user.Pets = userHasManyPets{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Pets", "model.Pet"),
		Toy: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Pets.Toy", "model.Toy"),
		},
	}

	_user.Toys = userHasManyToys{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Toys", "model.Toy"),
	}

	_user.Team = userHasManyTeam{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Team", "model.User"),
		Company: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Company", "model.Company"),
		},
		Manager: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Manager", "model.User"),
		},
		Account: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Account", "model.Account"),
		},
		Pets: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Pets", "model.Pet"),
		},
		Toys: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Toys", "model.Toy"),
		},
		Team: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Team", "model.User"),
		},
		Languages: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Languages", "model.Language"),
		},
		Friends: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Team.Friends", "model.User"),
		},
	}

	_user.Company = userBelongsToCompany{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Company", "model.Company"),
	}

	_user.Manager = userBelongsToManager{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Manager", "model.User"),
	}

	_user.Languages = userManyToManyLanguages{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Languages", "model.Language"),
	}

	_user.Friends = userManyToManyFriends{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Friends", "model.User"),
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo userDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Name      field.String
	Age       field.Uint
	Birthday  field.Time
	CompanyID field.Int
	ManagerID field.Uint
	Active    field.Bool
	Account   userHasOneAccount

	Pets userHasManyPets

	Toys userHasManyToys

	Team userHasManyTeam

	Company userBelongsToCompany

	Manager userBelongsToManager

	Languages userManyToManyLanguages

	Friends userManyToManyFriends

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Name = field.NewString(table, "name")
	u.Age = field.NewUint(table, "age")
	u.Birthday = field.NewTime(table, "birthday")
	u.CompanyID = field.NewInt(table, "company_id")
	u.ManagerID = field.NewUint(table, "manager_id")
	u.Active = field.NewBool(table, "active")

	u.fillFieldMap()

	return u
}

func (u *user) WithContext(ctx context.Context) *userDo { return u.userDo.WithContext(ctx) }

func (u user) TableName() string { return u.userDo.TableName() }

func (u user) Alias() string { return u.userDo.Alias() }

func (u user) Columns(cols ...field.Expr) gen.Columns { return u.userDo.Columns(cols...) }

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["name"] = u.Name
	u.fieldMap["age"] = u.Age
	u.fieldMap["birthday"] = u.Birthday
	u.fieldMap["company_id"] = u.CompanyID
	u.fieldMap["manager_id"] = u.ManagerID
	u.fieldMap["active"] = u.Active

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userHasOneAccount struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasOneAccount) Where(conds ...field.Expr) *userHasOneAccount {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasOneAccount) WithContext(ctx context.Context) *userHasOneAccount {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasOneAccount) Session(session *gorm.Session) *userHasOneAccount {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasOneAccount) Model(m *model.User) *userHasOneAccountTx {
	return &userHasOneAccountTx{a.db.Model(m).Association(a.Name())}
}

type userHasOneAccountTx struct{ tx *gorm.Association }

func (a userHasOneAccountTx) Find() (result *model.Account, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasOneAccountTx) Append(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasOneAccountTx) Replace(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasOneAccountTx) Delete(values ...*model.Account) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasOneAccountTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasOneAccountTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyPets struct {
	db *gorm.DB

	field.RelationField

	Toy struct {
		field.RelationField
	}
}

func (a userHasManyPets) Where(conds ...field.Expr) *userHasManyPets {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyPets) WithContext(ctx context.Context) *userHasManyPets {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyPets) Session(session *gorm.Session) *userHasManyPets {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyPets) Model(m *model.User) *userHasManyPetsTx {
	return &userHasManyPetsTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyPetsTx struct{ tx *gorm.Association }

func (a userHasManyPetsTx) Find() (result []*model.Pet, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyPetsTx) Append(values ...*model.Pet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyPetsTx) Replace(values ...*model.Pet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyPetsTx) Delete(values ...*model.Pet) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyPetsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyPetsTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyToys struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyToys) Where(conds ...field.Expr) *userHasManyToys {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyToys) WithContext(ctx context.Context) *userHasManyToys {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyToys) Session(session *gorm.Session) *userHasManyToys {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyToys) Model(m *model.User) *userHasManyToysTx {
	return &userHasManyToysTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyToysTx struct{ tx *gorm.Association }

func (a userHasManyToysTx) Find() (result []*model.Toy, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyToysTx) Append(values ...*model.Toy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyToysTx) Replace(values ...*model.Toy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyToysTx) Delete(values ...*model.Toy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyToysTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyToysTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyTeam struct {
	db *gorm.DB

	field.RelationField

	Company struct {
		field.RelationField
	}
	Manager struct {
		field.RelationField
	}
	Account struct {
		field.RelationField
	}
	Pets struct {
		field.RelationField
	}
	Toys struct {
		field.RelationField
	}
	Team struct {
		field.RelationField
	}
	Languages struct {
		field.RelationField
	}
	Friends struct {
		field.RelationField
	}
}

func (a userHasManyTeam) Where(conds ...field.Expr) *userHasManyTeam {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyTeam) WithContext(ctx context.Context) *userHasManyTeam {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyTeam) Session(session *gorm.Session) *userHasManyTeam {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyTeam) Model(m *model.User) *userHasManyTeamTx {
	return &userHasManyTeamTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyTeamTx struct{ tx *gorm.Association }

func (a userHasManyTeamTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyTeamTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyTeamTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyTeamTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyTeamTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyTeamTx) Count() int64 {
	return a.tx.Count()
}

type userBelongsToCompany struct {
	db *gorm.DB

	field.RelationField
}

func (a userBelongsToCompany) Where(conds ...field.Expr) *userBelongsToCompany {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userBelongsToCompany) WithContext(ctx context.Context) *userBelongsToCompany {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userBelongsToCompany) Session(session *gorm.Session) *userBelongsToCompany {
	a.db = a.db.Session(session)
	return &a
}

func (a userBelongsToCompany) Model(m *model.User) *userBelongsToCompanyTx {
	return &userBelongsToCompanyTx{a.db.Model(m).Association(a.Name())}
}

type userBelongsToCompanyTx struct{ tx *gorm.Association }

func (a userBelongsToCompanyTx) Find() (result *model.Company, err error) {
	return result, a.tx.Find(&result)
}

func (a userBelongsToCompanyTx) Append(values ...*model.Company) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userBelongsToCompanyTx) Replace(values ...*model.Company) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userBelongsToCompanyTx) Delete(values ...*model.Company) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userBelongsToCompanyTx) Clear() error {
	return a.tx.Clear()
}

func (a userBelongsToCompanyTx) Count() int64 {
	return a.tx.Count()
}

type userBelongsToManager struct {
	db *gorm.DB

	field.RelationField
}

func (a userBelongsToManager) Where(conds ...field.Expr) *userBelongsToManager {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userBelongsToManager) WithContext(ctx context.Context) *userBelongsToManager {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userBelongsToManager) Session(session *gorm.Session) *userBelongsToManager {
	a.db = a.db.Session(session)
	return &a
}

func (a userBelongsToManager) Model(m *model.User) *userBelongsToManagerTx {
	return &userBelongsToManagerTx{a.db.Model(m).Association(a.Name())}
}

type userBelongsToManagerTx struct{ tx *gorm.Association }

func (a userBelongsToManagerTx) Find() (result *model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userBelongsToManagerTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userBelongsToManagerTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userBelongsToManagerTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userBelongsToManagerTx) Clear() error {
	return a.tx.Clear()
}

func (a userBelongsToManagerTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyLanguages struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyLanguages) Where(conds ...field.Expr) *userManyToManyLanguages {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyLanguages) WithContext(ctx context.Context) *userManyToManyLanguages {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyLanguages) Session(session *gorm.Session) *userManyToManyLanguages {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyLanguages) Model(m *model.User) *userManyToManyLanguagesTx {
	return &userManyToManyLanguagesTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyLanguagesTx struct{ tx *gorm.Association }

func (a userManyToManyLanguagesTx) Find() (result []*model.Language, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyLanguagesTx) Append(values ...*model.Language) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyLanguagesTx) Replace(values ...*model.Language) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyLanguagesTx) Delete(values ...*model.Language) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyLanguagesTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyLanguagesTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyFriends struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyFriends) Where(conds ...field.Expr) *userManyToManyFriends {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyFriends) WithContext(ctx context.Context) *userManyToManyFriends {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyFriends) Session(session *gorm.Session) *userManyToManyFriends {
	a.db = a.db.Session(session)
	return &a
}

func (a userManyToManyFriends) Model(m *model.User) *userManyToManyFriendsTx {
	return &userManyToManyFriendsTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyFriendsTx struct{ tx *gorm.Association }

func (a userManyToManyFriendsTx) Find() (result []*model.User, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyFriendsTx) Append(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyFriendsTx) Replace(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyFriendsTx) Delete(values ...*model.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyFriendsTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyFriendsTx) Count() int64 {
	return a.tx.Count()
}

type userDo struct{ gen.DO }

func (u userDo) Debug() *userDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) *userDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() *userDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() *userDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) *userDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) *userDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) *userDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) *userDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) *userDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() *userDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) *userDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) *userDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
